#include "Machine8080.h"

int Machine8080::disassembleOpcode(const uint16_t pc) const{
    unsigned char opcode = state.memory[pc];
    unsigned int opbytes = 1;
    printf("Ox%04x 0x%02x ", pc, opcode);
    char stringbuffer[20];
    switch(opcode){
        case 0x00: sprintf(stringbuffer, "NOP"); break;
        case 0x01: sprintf(stringbuffer, "LXI    B,#$%02x%02x", state.memory[pc+2], state.memory[pc+1]); opbytes=3; break;
        case 0x02: sprintf(stringbuffer, "STAX   B"); break;
        case 0x03: sprintf(stringbuffer, "INX    B"); break;
        case 0x04: sprintf(stringbuffer, "INR    B"); break;
        case 0x05: sprintf(stringbuffer, "DCR    B"); break;
        case 0x06: sprintf(stringbuffer, "MVI    B,#$%02x", state.memory[pc+1]); opbytes=2; break;
        case 0x07: sprintf(stringbuffer, "RLC"); break;
        case 0x08: sprintf(stringbuffer, "NOP"); break;
        case 0x09: sprintf(stringbuffer, "DAD    B"); break;
        case 0x0a: sprintf(stringbuffer, "LDAX   B"); break;
        case 0x0b: sprintf(stringbuffer, "DCX    B"); break;
        case 0x0c: sprintf(stringbuffer, "INR    C"); break;
        case 0x0d: sprintf(stringbuffer, "DCR    C"); break;
        case 0x0e: sprintf(stringbuffer, "MVI    C,#$%02x", state.memory[pc+1]); opbytes = 2; break;
        case 0x0f: sprintf(stringbuffer, "RRC"); break;

        case 0x10: sprintf(stringbuffer, "NOP"); break;
        case 0x11: sprintf(stringbuffer, "LXI    D,#$%02x%02x", state.memory[pc+2], state.memory[pc+1]); opbytes=3; break;
        case 0x12: sprintf(stringbuffer, "STAX   D"); break;
        case 0x13: sprintf(stringbuffer, "INX    D"); break;
        case 0x14: sprintf(stringbuffer, "INR    D"); break;
        case 0x15: sprintf(stringbuffer, "DCR    D"); break;
        case 0x16: sprintf(stringbuffer, "MVI    D,#$%02x", state.memory[pc+1]); opbytes=2; break;
        case 0x17: sprintf(stringbuffer, "RAL"); break;
        case 0x18: sprintf(stringbuffer, "NOP"); break;
        case 0x19: sprintf(stringbuffer, "DAD    D"); break;
        case 0x1a: sprintf(stringbuffer, "LDAX   D"); break;
        case 0x1b: sprintf(stringbuffer, "DCX    D"); break;
        case 0x1c: sprintf(stringbuffer, "INR    E"); break;
        case 0x1d: sprintf(stringbuffer, "DCR    E"); break;
        case 0x1e: sprintf(stringbuffer, "MVI    E,#$%02x", state.memory[pc+1]); opbytes = 2; break;
        case 0x1f: sprintf(stringbuffer, "RAR"); break;

        case 0x20: sprintf(stringbuffer, "NOP"); break;
        case 0x21: sprintf(stringbuffer, "LXI    H,#$%02x%02x", state.memory[pc+2], state.memory[pc+1]); opbytes=3; break;
        case 0x22: sprintf(stringbuffer, "SHLD   $%02x%02x", state.memory[pc+2], state.memory[pc+1]); opbytes=3; break;
        case 0x23: sprintf(stringbuffer, "INX    H"); break;
        case 0x24: sprintf(stringbuffer, "INR    H"); break;
        case 0x25: sprintf(stringbuffer, "DCR    H"); break;
        case 0x26: sprintf(stringbuffer, "MVI    H,#$%02x", state.memory[pc+1]); opbytes=2; break;
        case 0x27: sprintf(stringbuffer, "DAA"); break;
        case 0x28: sprintf(stringbuffer, "NOP"); break;
        case 0x29: sprintf(stringbuffer, "DAD    H"); break;
        case 0x2a: sprintf(stringbuffer, "LHLD   $%02x%02x", state.memory[pc+2], state.memory[pc+1]); opbytes=3; break;
        case 0x2b: sprintf(stringbuffer, "DCX    H"); break;
        case 0x2c: sprintf(stringbuffer, "INR    L"); break;
        case 0x2d: sprintf(stringbuffer, "DCR    L"); break;
        case 0x2e: sprintf(stringbuffer, "MVI    L,#$%02x", state.memory[pc+1]); opbytes = 2; break;
        case 0x2f: sprintf(stringbuffer, "CMA"); break;

        case 0x30: sprintf(stringbuffer, "NOP"); break;
        case 0x31: sprintf(stringbuffer, "LXI    SP,#$%02x%02x", state.memory[pc+2], state.memory[pc+1]); opbytes=3; break;
        case 0x32: sprintf(stringbuffer, "STA    $%02x%02x", state.memory[pc+2], state.memory[pc+1]); opbytes=3; break;
        case 0x33: sprintf(stringbuffer, "INX    SP"); break;
        case 0x34: sprintf(stringbuffer, "INR    M"); break;
        case 0x35: sprintf(stringbuffer, "DCR    M"); break;
        case 0x36: sprintf(stringbuffer, "MVI    M,#$%02x", state.memory[pc+1]); opbytes=2; break;
        case 0x37: sprintf(stringbuffer, "STC"); break;
        case 0x38: sprintf(stringbuffer, "NOP"); break;
        case 0x39: sprintf(stringbuffer, "DAD    SP"); break;
        case 0x3a: sprintf(stringbuffer, "LDA    $%02x%02x (%02x)", state.memory[pc+2], state.memory[pc+1], state.memory[state.memory[pc+2] << 8 | state.memory[pc+1]]); opbytes=3; break;
        case 0x3b: sprintf(stringbuffer, "DCX    SP"); break;
        case 0x3c: sprintf(stringbuffer, "INR    A"); break;
        case 0x3d: sprintf(stringbuffer, "DCR    A"); break;
        case 0x3e: sprintf(stringbuffer, "MVI    A,#$%02x", state.memory[pc+1]); opbytes = 2; break;
        case 0x3f: sprintf(stringbuffer, "CMC"); break;

        case 0x40: sprintf(stringbuffer, "MOV    B,B"); break;
        case 0x41: sprintf(stringbuffer, "MOV    B,C"); break;
        case 0x42: sprintf(stringbuffer, "MOV    B,D"); break;
        case 0x43: sprintf(stringbuffer, "MOV    B,E"); break;
        case 0x44: sprintf(stringbuffer, "MOV    B,H"); break;
        case 0x45: sprintf(stringbuffer, "MOV    B,L"); break;
        case 0x46: sprintf(stringbuffer, "MOV    B,M"); break;
        case 0x47: sprintf(stringbuffer, "MOV    B,A"); break;
        case 0x48: sprintf(stringbuffer, "MOV    C,B"); break;
        case 0x49: sprintf(stringbuffer, "MOV    C,C"); break;
        case 0x4a: sprintf(stringbuffer, "MOV    C,D"); break;
        case 0x4b: sprintf(stringbuffer, "MOV    C,E"); break;
        case 0x4c: sprintf(stringbuffer, "MOV    C,H"); break;
        case 0x4d: sprintf(stringbuffer, "MOV    C,L"); break;
        case 0x4e: sprintf(stringbuffer, "MOV    C,M"); break;
        case 0x4f: sprintf(stringbuffer, "MOV    C,A"); break;

        case 0x50: sprintf(stringbuffer, "MOV    D,B"); break;
        case 0x51: sprintf(stringbuffer, "MOV    D,C"); break;
        case 0x52: sprintf(stringbuffer, "MOV    D,D"); break;
        case 0x53: sprintf(stringbuffer, "MOV    D.E"); break;
        case 0x54: sprintf(stringbuffer, "MOV    D,H"); break;
        case 0x55: sprintf(stringbuffer, "MOV    D,L"); break;
        case 0x56: sprintf(stringbuffer, "MOV    D,M"); break;
        case 0x57: sprintf(stringbuffer, "MOV    D,A"); break;
        case 0x58: sprintf(stringbuffer, "MOV    E,B"); break;
        case 0x59: sprintf(stringbuffer, "MOV    E,C"); break;
        case 0x5a: sprintf(stringbuffer, "MOV    E,D"); break;
        case 0x5b: sprintf(stringbuffer, "MOV    E,E"); break;
        case 0x5c: sprintf(stringbuffer, "MOV    E,H"); break;
        case 0x5d: sprintf(stringbuffer, "MOV    E,L"); break;
        case 0x5e: sprintf(stringbuffer, "MOV    E,M"); break;
        case 0x5f: sprintf(stringbuffer, "MOV    E,A"); break;

        case 0x60: sprintf(stringbuffer, "MOV    H,B"); break;
        case 0x61: sprintf(stringbuffer, "MOV    H,C"); break;
        case 0x62: sprintf(stringbuffer, "MOV    H,D"); break;
        case 0x63: sprintf(stringbuffer, "MOV    H.E"); break;
        case 0x64: sprintf(stringbuffer, "MOV    H,H"); break;
        case 0x65: sprintf(stringbuffer, "MOV    H,L"); break;
        case 0x66: sprintf(stringbuffer, "MOV    H,M"); break;
        case 0x67: sprintf(stringbuffer, "MOV    H,A"); break;
        case 0x68: sprintf(stringbuffer, "MOV    L,B"); break;
        case 0x69: sprintf(stringbuffer, "MOV    L,C"); break;
        case 0x6a: sprintf(stringbuffer, "MOV    L,D"); break;
        case 0x6b: sprintf(stringbuffer, "MOV    L,E"); break;
        case 0x6c: sprintf(stringbuffer, "MOV    L,H"); break;
        case 0x6d: sprintf(stringbuffer, "MOV    L,L"); break;
        case 0x6e: sprintf(stringbuffer, "MOV    L,M"); break;
        case 0x6f: sprintf(stringbuffer, "MOV    L,A"); break;

        case 0x70: sprintf(stringbuffer, "MOV    M,B"); break;
        case 0x71: sprintf(stringbuffer, "MOV    M,C"); break;
        case 0x72: sprintf(stringbuffer, "MOV    M,D"); break;
        case 0x73: sprintf(stringbuffer, "MOV    M.E"); break;
        case 0x74: sprintf(stringbuffer, "MOV    M,H"); break;
        case 0x75: sprintf(stringbuffer, "MOV    M,L"); break;
        case 0x76: sprintf(stringbuffer, "HLT");        break;
        case 0x77: sprintf(stringbuffer, "MOV    M,A"); break;
        case 0x78: sprintf(stringbuffer, "MOV    A,B"); break;
        case 0x79: sprintf(stringbuffer, "MOV    A,C"); break;
        case 0x7a: sprintf(stringbuffer, "MOV    A,D"); break;
        case 0x7b: sprintf(stringbuffer, "MOV    A,E"); break;
        case 0x7c: sprintf(stringbuffer, "MOV    A,H"); break;
        case 0x7d: sprintf(stringbuffer, "MOV    A,L"); break;
        case 0x7e: sprintf(stringbuffer, "MOV    A,M"); break;
        case 0x7f: sprintf(stringbuffer, "MOV    A,A"); break;

        case 0x80: sprintf(stringbuffer, "ADD    B"); break;
        case 0x81: sprintf(stringbuffer, "ADD    C"); break;
        case 0x82: sprintf(stringbuffer, "ADD    D"); break;
        case 0x83: sprintf(stringbuffer, "ADD    E"); break;
        case 0x84: sprintf(stringbuffer, "ADD    H"); break;
        case 0x85: sprintf(stringbuffer, "ADD    L"); break;
        case 0x86: sprintf(stringbuffer, "ADD    M"); break;
        case 0x87: sprintf(stringbuffer, "ADD    A"); break;
        case 0x88: sprintf(stringbuffer, "ADC    B"); break;
        case 0x89: sprintf(stringbuffer, "ADC    C"); break;
        case 0x8a: sprintf(stringbuffer, "ADC    D"); break;
        case 0x8b: sprintf(stringbuffer, "ADC    E"); break;
        case 0x8c: sprintf(stringbuffer, "ADC    H"); break;
        case 0x8d: sprintf(stringbuffer, "ADC    L"); break;
        case 0x8e: sprintf(stringbuffer, "ADC    M"); break;
        case 0x8f: sprintf(stringbuffer, "ADC    A"); break;

        case 0x90: sprintf(stringbuffer, "SUB    B"); break;
        case 0x91: sprintf(stringbuffer, "SUB    C"); break;
        case 0x92: sprintf(stringbuffer, "SUB    D"); break;
        case 0x93: sprintf(stringbuffer, "SUB    E"); break;
        case 0x94: sprintf(stringbuffer, "SUB    H"); break;
        case 0x95: sprintf(stringbuffer, "SUB    L"); break;
        case 0x96: sprintf(stringbuffer, "SUB    M"); break;
        case 0x97: sprintf(stringbuffer, "SUB    A"); break;
        case 0x98: sprintf(stringbuffer, "SBB    B"); break;
        case 0x99: sprintf(stringbuffer, "SBB    C"); break;
        case 0x9a: sprintf(stringbuffer, "SBB    D"); break;
        case 0x9b: sprintf(stringbuffer, "SBB    E"); break;
        case 0x9c: sprintf(stringbuffer, "SBB    H"); break;
        case 0x9d: sprintf(stringbuffer, "SBB    L"); break;
        case 0x9e: sprintf(stringbuffer, "SBB    M"); break;
        case 0x9f: sprintf(stringbuffer, "SBB    A"); break;

        case 0xa0: sprintf(stringbuffer, "ANA    B"); break;
        case 0xa1: sprintf(stringbuffer, "ANA    C"); break;
        case 0xa2: sprintf(stringbuffer, "ANA    D"); break;
        case 0xa3: sprintf(stringbuffer, "ANA    E"); break;
        case 0xa4: sprintf(stringbuffer, "ANA    H"); break;
        case 0xa5: sprintf(stringbuffer, "ANA    L"); break;
        case 0xa6: sprintf(stringbuffer, "ANA    M"); break;
        case 0xa7: sprintf(stringbuffer, "ANA    A"); break;
        case 0xa8: sprintf(stringbuffer, "XRA    B"); break;
        case 0xa9: sprintf(stringbuffer, "XRA    C"); break;
        case 0xaa: sprintf(stringbuffer, "XRA    D"); break;
        case 0xab: sprintf(stringbuffer, "XRA    E"); break;
        case 0xac: sprintf(stringbuffer, "XRA    H"); break;
        case 0xad: sprintf(stringbuffer, "XRA    L"); break;
        case 0xae: sprintf(stringbuffer, "XRA    M"); break;
        case 0xaf: sprintf(stringbuffer, "XRA    A"); break;

        case 0xb0: sprintf(stringbuffer, "ORA    B"); break;
        case 0xb1: sprintf(stringbuffer, "ORA    C"); break;
        case 0xb2: sprintf(stringbuffer, "ORA    D"); break;
        case 0xb3: sprintf(stringbuffer, "ORA    E"); break;
        case 0xb4: sprintf(stringbuffer, "ORA    H"); break;
        case 0xb5: sprintf(stringbuffer, "ORA    L"); break;
        case 0xb6: sprintf(stringbuffer, "ORA    M"); break;
        case 0xb7: sprintf(stringbuffer, "ORA    A"); break;
        case 0xb8: sprintf(stringbuffer, "CMP    B"); break;
        case 0xb9: sprintf(stringbuffer, "CMP    C"); break;
        case 0xba: sprintf(stringbuffer, "CMP    D"); break;
        case 0xbb: sprintf(stringbuffer, "CMP    E"); break;
        case 0xbc: sprintf(stringbuffer, "CMP    H"); break;
        case 0xbd: sprintf(stringbuffer, "CMP    L"); break;
        case 0xbe: sprintf(stringbuffer, "CMP    M"); break;
        case 0xbf: sprintf(stringbuffer, "CMP    A"); break;

        case 0xc0: sprintf(stringbuffer, "RNZ"); break;
        case 0xc1: sprintf(stringbuffer, "POP    B"); break;
        case 0xc2: sprintf(stringbuffer, "JNZ    $%02x%02x",state.memory[pc+2],state.memory[pc+1]); opbytes = 3; break;
        case 0xc3: sprintf(stringbuffer, "JMP    $%02x%02x",state.memory[pc+2],state.memory[pc+1]); opbytes = 3; break;
        case 0xc4: sprintf(stringbuffer, "CNZ    $%02x%02x",state.memory[pc+2],state.memory[pc+1]); opbytes = 3; break;
        case 0xc5: sprintf(stringbuffer, "PUSH   B"); break;
        case 0xc6: sprintf(stringbuffer, "ADI    #$%02x",state.memory[pc+1]); opbytes = 2; break;
        case 0xc7: sprintf(stringbuffer, "RST    0"); break;
        case 0xc8: sprintf(stringbuffer, "RZ"); break;
        case 0xc9: sprintf(stringbuffer, "RET"); break;
        case 0xca: sprintf(stringbuffer, "JZ     $%02x%02x",state.memory[pc+2],state.memory[pc+1]); opbytes = 3; break;
        case 0xcb: sprintf(stringbuffer, "JMP    $%02x%02x",state.memory[pc+2],state.memory[pc+1]); opbytes = 3; break;
        case 0xcc: sprintf(stringbuffer, "CZ     $%02x%02x",state.memory[pc+2],state.memory[pc+1]); opbytes = 3; break;
        case 0xcd: sprintf(stringbuffer, "CALL   $%02x%02x",state.memory[pc+2],state.memory[pc+1]); opbytes = 3; break;
        case 0xce: sprintf(stringbuffer, "ACI    #$%02x",state.memory[pc+1]); opbytes = 2; break;
        case 0xcf: sprintf(stringbuffer, "RST    1"); break;

        case 0xd0: sprintf(stringbuffer, "RNC"); break;
        case 0xd1: sprintf(stringbuffer, "POP    D"); break;
        case 0xd2: sprintf(stringbuffer, "JNC    $%02x%02x",state.memory[pc+2],state.memory[pc+1]); opbytes = 3; break;
        case 0xd3: sprintf(stringbuffer, "OUT    #$%02x",state.memory[pc+1]); opbytes = 2; break;
        case 0xd4: sprintf(stringbuffer, "CNC    $%02x%02x",state.memory[pc+2],state.memory[pc+1]); opbytes = 3; break;
        case 0xd5: sprintf(stringbuffer, "PUSH   D"); break;
        case 0xd6: sprintf(stringbuffer, "SUI    #$%02x",state.memory[pc+1]); opbytes = 2; break;
        case 0xd7: sprintf(stringbuffer, "RST    2"); break;
        case 0xd8: sprintf(stringbuffer, "RC");  break;
        case 0xd9: sprintf(stringbuffer, "RET"); break;
        case 0xda: sprintf(stringbuffer, "JC     $%02x%02x",state.memory[pc+2],state.memory[pc+1]); opbytes = 3; break;
        case 0xdb: sprintf(stringbuffer, "IN     #$%02x",state.memory[pc+1]); opbytes = 2; break;
        case 0xdc: sprintf(stringbuffer, "CC     $%02x%02x",state.memory[pc+2],state.memory[pc+1]); opbytes = 3; break;
        case 0xdd: sprintf(stringbuffer, "CALL   $%02x%02x",state.memory[pc+2],state.memory[pc+1]); opbytes = 3; break;
        case 0xde: sprintf(stringbuffer, "SBI    #$%02x",state.memory[pc+1]); opbytes = 2; break;
        case 0xdf: sprintf(stringbuffer, "RST    3"); break;

        case 0xe0: sprintf(stringbuffer, "RPO"); break;
        case 0xe1: sprintf(stringbuffer, "POP    H"); break;
        case 0xe2: sprintf(stringbuffer, "JPO    $%02x%02x",state.memory[pc+2],state.memory[pc+1]); opbytes = 3; break;
        case 0xe3: sprintf(stringbuffer, "XTHL");break;
        case 0xe4: sprintf(stringbuffer, "CPO    $%02x%02x",state.memory[pc+2],state.memory[pc+1]); opbytes = 3; break;
        case 0xe5: sprintf(stringbuffer, "PUSH   H"); break;
        case 0xe6: sprintf(stringbuffer, "ANI    #$%02x",state.memory[pc+1]); opbytes = 2; break;
        case 0xe7: sprintf(stringbuffer, "RST    4"); break;
        case 0xe8: sprintf(stringbuffer, "RPE"); break;
        case 0xe9: sprintf(stringbuffer, "PCHL");break;
        case 0xea: sprintf(stringbuffer, "JPE    $%02x%02x",state.memory[pc+2],state.memory[pc+1]); opbytes = 3; break;
        case 0xeb: sprintf(stringbuffer, "XCHG"); break;
        case 0xec: sprintf(stringbuffer, "CPE     $%02x%02x",state.memory[pc+2],state.memory[pc+1]); opbytes = 3; break;
        case 0xed: sprintf(stringbuffer, "CALL   $%02x%02x",state.memory[pc+2],state.memory[pc+1]); opbytes = 3; break;
        case 0xee: sprintf(stringbuffer, "XRI    #$%02x",state.memory[pc+1]); opbytes = 2; break;
        case 0xef: sprintf(stringbuffer, "RST    5"); break;

        case 0xf0: sprintf(stringbuffer, "RP");  break;
        case 0xf1: sprintf(stringbuffer, "POP    PSW"); break;
        case 0xf2: sprintf(stringbuffer, "JP     $%02x%02x",state.memory[pc+2],state.memory[pc+1]); opbytes = 3; break;
        case 0xf3: sprintf(stringbuffer, "DI");  break;
        case 0xf4: sprintf(stringbuffer, "CP     $%02x%02x",state.memory[pc+2],state.memory[pc+1]); opbytes = 3; break;
        case 0xf5: sprintf(stringbuffer, "PUSH   PSW"); break;
        case 0xf6: sprintf(stringbuffer, "ORI    #$%02x",state.memory[pc+1]); opbytes = 2; break;
        case 0xf7: sprintf(stringbuffer, "RST    6"); break;
        case 0xf8: sprintf(stringbuffer, "RM");  break;
        case 0xf9: sprintf(stringbuffer, "SPHL");break;
        case 0xfa: sprintf(stringbuffer, "JM     $%02x%02x",state.memory[pc+2],state.memory[pc+1]); opbytes = 3; break;
        case 0xfb: sprintf(stringbuffer, "EI");  break;
        case 0xfc: sprintf(stringbuffer, "CM     $%02x%02x",state.memory[pc+2],state.memory[pc+1]); opbytes = 3; break;
        case 0xfd: sprintf(stringbuffer, "CALL   $%02x%02x",state.memory[pc+2],state.memory[pc+1]); opbytes = 3; break;
        case 0xfe: sprintf(stringbuffer, "CPI    #$%02x",state.memory[pc+1]); opbytes = 2; break;
        case 0xff: sprintf(stringbuffer, "RST    7"); break;

        default: break;
    }
    printf("%-20s", stringbuffer);
    return opbytes;
}